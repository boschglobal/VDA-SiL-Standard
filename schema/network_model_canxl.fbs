/******************************************************************
* FILE:            network_model_canxl.fbs
* VERSION:         3.0.1
* DATE:            22.01.2025
* DESCRIPTION:     Schemation File for CANXL
* COPYRIGHT:       © 2023 VDA SiLVI Workgroup
*
* SPDX-License-Identifier: Apache-2.0
*
******************************************************************/


// Interface Description for VDA SiLVI Interface - Network Model - CANXL
//
// Network Model Canxl - NMX - NMXL (flatbuffers file identifier)
//
// Author: VDA SiLVI Workgroup
// MIME type: application/vda.silvi.canxl.flatbuffers

namespace NetworkModels.CANXL;

// CAN XL Bus Model
// ================

// Bus Status.
enum BusState:byte { BusOff = 0, Idle = 1, Sync = 2 }

table CanStatus {
    sync:BusState = Idle;
}

// CAN XL Bus Model
// ================

// Used for timestamps and simulation time.
// psec10 is the number of tens of picoseconds since the beginning of the simulation
// 1e-11 precision is required to get precise message timing for 10Gbit Ethernet and even faster buses
struct TimeSpec {
    psec10:long = 0;      //number of tens of picoseconds (resolution 1e-11 second)
}

// Set of time stamps describing the entire timing of the message (filled in RX)
// Those time stamps shall be provided by the bus simulation when messages are received. 
// When sending messages there is no need to fill in any time stamps - they can be set to 0.
struct MessageTiming {
    send_request:TimeSpec;      // time stamp of send request (virtual time)
    arbitration:TimeSpec;       // time stamp of message arbitration (virtual time)
    reception:TimeSpec;         // time stamp of message reception (virtual time)
}

// Direction (of a CAN Buffer)
enum BufferDirection:byte { Tx = 0, Rx = 1 }

// Status of a CAN Buffer.
enum BufferStatus:byte { None = 0, RxError = 1 }

// The virtual bus implementation is expected to do the CRC calculation and checking as well as
// the insertion and removal of stuffing bits

enum FrameType:byte{
    standard_frame=0,
    extended_frame=1
}


// Link Protocol Data Unit.
table Frame {
    sdt:ubyte;  	        // The SDT is a feature that is usable for higher-layer protocols. The 8-bit SDT indicates the used next OSI layer protocol.
							// It is an embedded (OSI) layer management information as described in ISO 7498-4:1998 and is similar to the
							// Ethertype field in the Ethernet frame.
							// CiA 611-1 specifies the SDT values and the corresponding usage to unfold the power of this field. The first
							// version of CiA 611-1 specifies SDT values for:
							// ◆ Content-based addressing (i.e. use of message IDs)
							// ◆ Node addressing
							// ◆ Nodes tunneling of Ethernet frames
							// ◆ Classical CAN and CAN FD data frames

							//											SDT  VCID 		AF 					Data-Field
							//  Content Based Addressing		 	    0x01      		Msg-ID 				CAN Data 
							//  Node Addressing                         0x02 			Dst-/Src-Adr		CAN Data
							//  Classical & FD Frame Tunneling          0x03 			Frame ID 			Classical or CAN FD Frame
							//  IEEE 802.3 (Eth) Tunneling              0x04 			user defined 		Ethernet frame, without FCS
							//  IEEE 802.3 (Eth) mapped Tunneling       0x05 VLAN-ID	Trunc DestMACAdr	Ethernet frame, without FCS


    vcid:ubyte	;			// Virtual CAN network ID (VCID)
							// The 8-bit VCID field allows running up to 256 logical networks on one single CAN XL physical network segment.
							// This will allow to use many protocols in parallel, on the same physical CAN network. 
							// This field is also an embedded (OSI) layer management information as described in ISO 7498-4:1998.
							
	prio_id:ushort;			// 11-bit priority ID sub-field: This field provides the
							// uniquely assigned priority of the CAN XL data frame
							
	af:uint;				//32-bit acceptance field interpretation depends on SDT and supports both:
							//1) Content based addressing (Message ID)
							//2) Node based addressing (Src/Dst Address)
	
	payload:[ubyte];        // Payload of the CAN XL frame, covered by DLC. Can be longer than the
                            // payload length specified by DLC, but must not be shorter
    length:ushort; 		    // Length of payload content (not the size of the payload vector)
                            // posssible values as defined by CAN XL DLC spec: 0..2048 vs. 0..2047 (pending discussion/clarification).
	
		
	sec:bool;				// The SEC bit in the control field indicates, if this CAN XL data frame uses the CADsec protocol. 
	                        // CADsec offers authentication of control field and payload, and the further option to encrypt the payload.				
														
	rtr:bool;               // Remote Frame request.	
    type:FrameType = standard_frame;     // StandardFrame, ExtendedFrame
}

// The CRC calculation happens internally on lower layers and shall not be performed/checked by the application



// Arbitration to Data Phase Modes
enum ArbitDataPhase_Mode:byte {
    FDMode=0, // FD Data-Phase
	SicMode=1, // XL Data-Phase
}



// Frame + meta information from/to interface
table MetaFrame {
    status:BufferStatus = None;         // None, RxError
    direction:BufferDirection = Tx;     // Tx, Rx
	
    ads:ArbitDataPhase_Mode = FDMode;  // Arbitration Data Sequence ➔ Bit Rate Switching from Arbitration to Data Phase
	
    frame:Frame;                        // CAN Frame

    timing:MessageTiming (required);    // timing of the message
}

//For RTR frames set the RTR bit and no payload bytes (empty buffer)
//If the buffer is not empty but the RTR bit is set then buffer must be ignored (not sent)

// CAN Register File
// The register file is expected to operate in FIFO mode
// Main entity to communicate with e. g. SiLVI API
// IMPORTANT NOTE:
// You must finish the register file using FinishSizePrefixed(..., "NMXL")
// Correspondingly call GetSizePrefixedRegisterFile() in order to get the flatbuffer size
// ======================
table RegisterFile {
    buffer:[MetaFrame];                 // Buffer of MetaFrames
}

//LPDU = raw frame - something that contains information which would also be on the wire
//Buffer = LPDU extended by additional information from/to controller
root_type RegisterFile;
file_identifier "NMXL";
file_extension "canxl";
